import { Interface } from '@casimir.one/toolbox';

/* Keep args in functions to validate interface */

const defaultLimit = 1000;
const defaultIdx = 0;

const ChainRpc = Interface('ChainRpc', {
  sendTxAsync: async function (tx) { },
  setBlockAppliedCallbackAsync: async function (cb) { },
  getStateAsync: async function (path) { },
  getConfigAsync: async function () { },
  getDynamicGlobalPropertiesAsync: async function () { },
  getChainPropertiesAsync: async function () { },
  getWitnessScheduleAsync: async function () { },
  getHardforkVersionAsync: async function () { },
  getNextScheduledHardforkAsync: async function () { },
  getAccountsAsync: async function (daoIds) { },
  getAccountReferencesAsync: async function (accountId) { },
  getAccountsListAsync: async function (startIdx = defaultIdx, limit = defaultLimit) { },
  getAccountCountAsync: async function () { },
  getAccountHistoryAsync: async function (account, from, limit) { },
  getOwnerHistoryAsync: async function (account) { },
  getRecoveryRequestAsync: async function (account) { },
  getWithdrawRoutesAsync: async function (account, withdrawRouteType) { },
  getAccountBandwidthAsync: async function (account, bandwidthType) { },
  getTransactionHexAsync: async function (trx) { },
  getKeyReferencesAsync: async function (keys, fullHistory) { },
  getAccountKeyReferencesAsync: async function (accounts, fullHistory) { },
  getTeamReferencesAsync: async function (teams, fullHistory) { },
  getTeamMemberReferencesAsync: async function (members, fullHistory) { },
  getBlockAsync: async function (blockNum) { },
  getOpsHistoryAsync: async function (from, limit, opt) { },
  getTransactionAsync: async function (trxId) { },
  getBlockHeaderAsync: async function (blockNum) { },
  getOpsInBlockAsync: async function (blockNum, onlyVirtual) { },
  getBlocksHistoryAsync: async function (from, limit) { },
  getAccountDeipToDeipTransfersAsync: async function (account, from, limit) { },
  getRequiredSignaturesAsync: async function (trx, availableKeys) { },
  getPotentialSignaturesAsync: async function (trx) { },
  verifyAuthorityAsync: async function (trx) { },
  getWitnessesAsync: async function (witnessIds) { },
  getWitnessByAccountAsync: async function (accountName) { },
  getWitnessesByVoteAsync: async function (from, limit) { },
  lookupWitnessAccountsAsync: async function (lowerBoundName, limit) { },
  getWitnessCountAsync: async function () { },
  getActiveWitnessesAsync: async function () { },
  loginAsync: async function (username, password) { },
  getApiByNameAsync: async function (databaseApi) { },
  getVersionAsync: async function () { },
  broadcastTransactionAsync: async function (trx) { },
  broadcastTransactionWithCallbackAsync: async function (confirmationCallback, trx) { },
  broadcastBlockAsync: async function (b) { },
  setMaxBlockAgeAsync: async function (maxBlockAge) { },
  getTeamAsync: async function (account) { },
  lookupTeamsAsync: async function (lowerBound, limit) { },
  getTeamsAsync: async function (ids) { },
  getTeamByPermlinkAsync: async function (permlink) { },
  getSchemaAsync: async function () { },
  getExpiringVestingDelegationsAsync: async function (account, from, limit) { },
  getProjectByPermlinkAsync: async function (teamId, permlink) { },
  getProjectByAbsolutePermlinkAsync: async function (teamPermlink, projectPermlink) { },
  getProjectLicenseAsync: async function (id) { },
  getProjectLicensesAsync: async function (ids) { },
  getProjectLicensesByLicenseeAsync: async function (licensee) { },
  getProjectLicensesByLicenserAsync: async function (licenser) { },
  getProjectLicensesByProjectAsync: async function (projectId) { },
  getProjectLicensesByLicenseeAndProjectAsync: async function (licensee, projectId) { },
  getProjectLicensesByLicenseeAndLicenserAsync: async function (licensee, licenser) { },
  getExpertTokenAsync: async function (id) { },
  getExpertTokensByAccountNameAsync: async function (accountName) { },
  getProposalAsync: async function (id) { },
  getProposalsListAsync: async function (startIdx = defaultIdx, limit = defaultLimit) { },
  getTeamTokenByAccountAndProjectGroupIdAsync: async function (account, teamId) { },
  getInvestmentOpportunityAsync: async function (invstOppId) { },
  checkTeamExistenceByPermlinkAsync: async function (name) { },
  checkProjectExistenceByPermlinkAsync: async function (teamId, title) { },
  lookupWitnessAccountsAsync: async function (lowerBoundName, limit) { },
  getWitnessByAccountAsync: async function (accountName) { },
  getProjectTokensByAccountNameAsync: async function (accountName) { },
  getProjectTokensByProjectIdAsync: async function (projectId) { },
  getProjectTokenByAccountNameAndProjectIdAsync: async function (accountName, projectId) { },
  getFundingOpportunityAnnouncementAsync: async function (id) { },
  getFundingOpportunityAnnouncementByNumberAsync: async function (number) { },
  getFundingOpportunityAnnouncementsByOrganizationAsync: async function (teamId) { },
  getFundingOpportunityAnnouncementsListingAsync: async function (page, limit) { },
  getFungibleTokenAsync: async function (id) { },
  getFungibleTokenBySymbolAsync: async function (assetSymbol) { },
  getFungibleTokenByIssuerAsync: async function (issuer) { },
  getFungibleTokenByTypeAsync: async function (type) { },
  getFungibleTokenListAsync: async function () { },
  getFundingTransactionAsync: async function (id) { },
  getFundingTransactionsBySenderOrganisationAsync: async function (senderOrganisationId) { },
  getFundingTransactionsByReceiverOrganisationAsync: async function (receiverOrganisationId) { },
  getFungibleTokenBalancesListAsync: async function () { },
  getAssetStatisticsAsync: async function (assetSymbol) { },
  getFungibleTokenBalanceByOwnerAsync: async function (daoId, assetId) { },
  getFungibleTokenBalanceByOwnerAndSymbolAsync: async function (daoId, assetSymbol) { },
  getFungibleTokenBalancesAsync: async function (assetId) { },
  getFungibleTokenBalancesBySymbolAsync: async function (assetSymbol) { },
  getSubscriptionAsync: async function (id) { },
  getSubscriptionByTeamIdAsync: async function (teamId) { },
  getSubscriptionsByOwnerAsync: async function (owner) { },
  getOrganisationHistoryAsync: async function (organisationId) { },
  getContentHistoryByHashAsync: async function (contentHash) { },
  getContentHistoryByProjectAndHashAsync: async function (projectId, contentHash) { },
  getContributionsHistoryByContributorAsync: async function (investor) { },
  getContributionsHistoryByContributorAndProjectAsync: async function (investor, projectId) { },
  getContributionsHistoryByProjectAsync: async function (projectId) { },
  getProposalsBySignerAsync: async function (account) { },
  getProposalsBySignersAsync: async function (accounts) { },
  getProposalStateAsync: async function (id) { },
  getProposalsStatesAsync: async function (ids) { },
  lookupProposalsStatesAsync: async function (lowerBound, limit) { },
  getContractAgreementAsync: (contractAgreementId) => { },
  getContractAgreementsByCreatorAsync: (creator) => { },
  getAccountAsync: (daoId) => { },
  getContractAgreementsListAsync: (startIdx = defaultIdx, limit = defaultLimit) => { },
  getContractAgreementsByTypeAsync: (type, startIdx = defaultIdx, limit = defaultLimit) => { },
  getFungibleTokenBalancesByOwnerAsync: async (daoIdOrAddress) => {},
  getProjectAssetsAsync: async (projectId) => { }
});


class BaseChainRpc {  
  constructor(impl) {
    Interface.implement(impl, ChainRpc);
    return impl;
  }
}


export default BaseChainRpc;